#include <IRremote.h>

// Pin Definitions for Motor Control
const int pinA = 5;  // Motor A speed (PWM)
const int pinB = 6;  // Motor B speed (PWM)
const int pinC = 7;  // Motor A direction
const int pinD = 8;  // Motor B direction
const int pinE = 3;  // Standby pin to stop the whole car
int carState = 0;  // Start with the car off (motors stopped)
int carSpeed = 50;  // Initial speed of the car (range: 0 to 255)

const int IR_RECEIVE_PIN = 9;  // IR receiver pin

void setup() {
  Serial.begin(9600);
  pinMode(0, OUTPUT);
  pinMode(1, OUTPUT);
  pinMode(2, OUTPUT);
}

void loop() {
  // Read sensor values
  int rightSensor = analogRead(A0);
  delay(100);
  int middleSensor = analogRead(A1);
  delay(100);
  int leftSensor = analogRead(A2);

  // Output sensor readings to serial monitor
  Serial.print("Right = ");
  Serial.println(rightSensor);
  Serial.print("Middle = ");
  Serial.println(middleSensor);
  Serial.print("Left = ");
  Serial.println(leftSensor);

  // If middle sensor is between 500 and 800, move the car forward
  if (middleSensor > 500 && middleSensor < 800) {
    forward();
  }
  // If the right sensor is between 500 and 800, move the car right
  else if (rightSensor > 500 && rightSensor < 800) {
    right();
  }
  // If the left sensor is between 500 and 800, move the car left
  else if (leftSensor > 500 && leftSensor < 800) {
    left();
  }
  // If all sensors are greater than 850, stop the car (on air)
  else if (middleSensor > 850 && rightSensor > 850 && leftSensor > 850) {
    stopMotors();
  }
  // If all sensors are less than 50, the car is on the ground but not on the tape
  else if (middleSensor < 50 && rightSensor < 50 && leftSensor < 50) {
    right(); 
  }
  // Additional condition for middle, right, and left sensors all below 50
  else if (middleSensor < 50 && rightSensor < 50 && leftSensor < 50) {
    left();
  }
}

// Move forward
void forward() {
    digitalWrite(pinC, HIGH);   // Motor A direction (forward)
    analogWrite(pinA, carSpeed); // Motor A speed (set speed)
    digitalWrite(pinD, HIGH);   // Motor B direction (forward)
    analogWrite(pinB, carSpeed); // Motor B speed (set speed)

    digitalWrite(pinE, carState); // Enable car (turn on motors if carState is 1)
}

// Function to turn the car to the right
void right() {
  digitalWrite(pinC, LOW);   // Motor A direction (backward)
  analogWrite(pinA, carSpeed); // Motor A speed (set speed)
  digitalWrite(pinD, HIGH);   // Motor B direction (forward)
  analogWrite(pinB, carSpeed); // Motor B speed (set speed)

  digitalWrite(pinE, carState); // Enable car (turn on motors if carState is 1)
}

// Move left
void left() {
    digitalWrite(pinC, HIGH);   // Motor A direction (forward)
    analogWrite(pinA, carSpeed); // Motor A speed (set speed)
    digitalWrite(pinD, LOW);   // Motor B direction (backward)
    analogWrite(pinB, carSpeed); // Motor B speed (set speed)

    digitalWrite(pinE, carState); // Enable car (turn on motors if carState is 1)
}

// Stop motors when the car is off
void stopMotors() {
    digitalWrite(pinC, LOW);   // Motor A direction (stop)
    analogWrite(pinA, 0);      // Motor A speed (stop)
    digitalWrite(pinD, LOW);   // Motor B direction (stop)
    analogWrite(pinB, 0);      // Motor B speed (stop)
}
